# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

0) Fix all the occurences of "FixMe" : 
  grep FixMe features/steps/*.py
and fix the things we know are broken. 
I don't know Tryton very well.

1) Pull the existing doctests into the behave framework so that
we can eliminate the duplication in the doctests, and build up
coverage. The huge advantage to this is that when properly 
parameterized, the test steps become the boilerplate for the
Test Driven Development of production systems.

Currently (2.8.2), these are the existing doctests:

trytond_account-2.8.1/tests/scenario_account_reconciliation.rst
trytond_account_asset-2.8.0/tests/scenario_account_asset.rst
trytond_account_invoice-2.8.2/tests/scenario_invoice.rst
trytond_account_invoice-2.8.2/tests/scenario_invoice_supplier.rst
trytond_account_statement-2.8.0/tests/scenario_account_statement.rst
trytond_account_stock_anglo_saxon-2.8.0/tests/scenario_account_stock_anglo_saxon.rst
trytond_account_stock_continental-2.8.1/tests/scenario_account_stock_continental.rst
trytond_carrier_percentage-2.8.0/tests/scenario_carrier_percentage_with_purchase_shipment_cost.rst
trytond_carrier_weight-2.8.0/tests/scenario_carrier_weight.rst
trytond_production-2.8.0/tests/scenario_production.rst
trytond_project_invoice-2.8.2/tests/scenario_project_invoice_effort.rst
trytond_project_invoice-2.8.2/tests/scenario_project_invoice_timesheet.rst
trytond_purchase_shipment_cost-2.8.0/tests/scenario_purchase_shipment_cost.rst
trytond_purchase_shipment_cost-2.8.0/tests/scenario_purchase_shipment_cost_with_account_stock.rst
trytond_purchase_shipment_cost-2.8.0/tests/scenario_purchase_shipment_cost_with_account_stock_anglo_saxon.rst
trytond_sale-2.8.1/tests/scenario_sale.rst
trytond_sale_shipment_cost-2.8.0/tests/scenario_sale_shipment_cost.rst
trytond_sale_supply-2.8.0/tests/scenario_sale_supply.rst
trytond_sale_supply-2.8.1/tests/scenario_sale_supply.rst
trytond_sale_supply_drop_shipment-2.8.0/tests/scenario_sale_supply_drop_shipment.rst
trytond_sale_supply_drop_shipment-2.8.1/tests/scenario_sale_supply_drop_shipment.rst
trytond_stock-2.8.2/tests/scenario_stock_average_cost_price.rst
trytond_stock-2.8.2/tests/scenario_stock_shipment_out.rst
trytond_stock_lot-2.8.0/tests/scenario_stock_lot_shipment_out.rst


2) Pull the code from existing non-doctests into the behave framework 
so that we can build up coverage, and start running coverage metrics.

3) Identify the trytond modules whose tests are really just proforma
boilerplate (well better than nothing :-) and create empty feature
files to attract testing to them. They're easy to identify because
they're about 45 lines long. Currently (2.8.2), these are:

trytond_carrier-2.8.0/tests/test_carrier.py
trytond_country-2.8.0/tests/test_country.py
trytond_project-2.8.0/tests/test_project.py
trytond_calendar-2.8.0/tests/test_calendar.py
trytond_dashboard-2.8.0/tests/test_dashboard.py
trytond_timesheet-2.8.0/tests/test_timesheet.py
trytond_google_maps-2.8.0/tests/test_google_maps.py
trytond_project_plan-2.8.2/tests/test_project_plan.py
trytond_analytic_sale-2.8.0/tests/test_analytic_sale.py
trytond_sale_price_list-2.8.0/tests/test_sale_price_list.py
trytond_account_product-2.8.0/tests/test_account_product.py
trytond_ldap_connection-2.8.0/tests/test_ldap_connection.py
trytond_analytic_account-2.8.0/tests/test_analytic_account.py
trytond_analytic_invoice-2.8.0/tests/test_analytic_invoice.py
trytond_sale_opportunity-2.8.1/tests/test_sale_opportunity.py
trytond_company_work_time-2.8.0/tests/test_company_work_time.py
trytond_analytic_purchase-2.8.0/tests/test_analytic_purchase.py
trytond_product_price_list-2.8.0/tests/test_product_price_list.py
trytond_ldap_authentication-2.8.0/tests/test_ldap_authentication.py
trytond_product_cost_history-2.8.0/tests/test_product_cost_history.py
trytond_calendar_scheduling-2.8.0/tests/test_calendar_scheduling.py
trytond_product_measurements-2.8.0/tests/test_measurements.py
trytond_stock_product_location-2.8.0/tests/test_stock_product_location.py
trytond_stock_location_sequence-2.8.0/tests/test_stock_location_sequence.py
trytond_stock_inventory_location-2.8.0/tests/test_stock_inventory_location.py
trytond_product_attribute-2.8.0/tests/test_product_attribute.py
trytond_calendar_todo-2.8.0/tests/test_calendar_todo.py
trytond_stock_supply_production-2.8.0/tests/test_stock_supply_production.py
trytond_account_invoice_line_standalone-2.8.0/tests/test_account_invoice_line_standalone.py

5) Start porting over the magic from the OpenERPScenario file steps/dsl.py
that does the type detection of Tryton fields, and the innstance detecion
of its "by name:" and "by oid:". We'll need help from Tryton experts
for this kind of deep internals work.

4) Go through OpenERPScenario for some of their more advanced tests
that may be isomorphic with Tryton, and port them over.

