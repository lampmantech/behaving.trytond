# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/scenario_account_stock_anglo_saxon.py


   ==================================
   Account Stock Continental Scenario
   ==================================
   This is a straight cut-and-paste from
   trytond_account-2.8.1/tests/scenario_account_reconciliation.rst
   Unfinished.

**T/ASAS/SASAS Create products of type "{uType}" from the ProductTemplate named "{uName}" with fields**
   global dCacheCostPriceMethod
   current_config = context.oProteusConfig
   Product = proteus.Model.get('product.product')
   ProductTemplate = proteus.Model.get('product.template')
   # FixMe: ('cost_price_method', '=', 'fixed'), gives a SQL Error
   # ProgrammingError: can't adapt type 'product.template'
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   Party = proteus.Model.get('party.party')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   # not ('company', '=', company.id),
   oTemplate, = ProductTemplate.find([('name', '=', uName),
   ('type', '=', uType)])
   for row in context.table:
   uRowName = row['name']
   uRowDescription = row['description']
   uCostPriceMethod = row['cost_price_method']
   # not ('company', '=', company.id),
   if Product.find([('description', '=', uRowDescription)]): continue
   if uCostPriceMethod == u'fixed':
   product_fixed = Product()
   product_fixed.template = oTemplate
   product_fixed.description = uRowDescription
   product_fixed.save()
   elif uCostPriceMethod == u'average':
   template_average = ProductTemplate(
   ProductTemplate.copy([oTemplate.id],
   current_config.context)[0])
   template_average.cost_price_method = 'average'
   template_average.cost_price_method = 'average'
   template_average.save()
   # FixMe: I dont understand this logic here
   # hardcoded this would be ('description', '=', 'product_fixed')
   #?product_fixed = Product.find([])[0]
   product_average = Product(
   Product.copy([product_fixed.id], {
   'template': template_average.id,
   }, current_config.context)[0])
   #? why use the copy? why not just:
   #product_average = Product()
   #product_average.template = oTemplate_average
   #product_average.description = uRowDescription
   product_average.description = uRowDescription
   product_average.save()
   # 12 products, Supplier

**T/ASAS/SASAS Purchase products on the P. O. with description "{uDescription}" from supplier "{uSupplier}" with quantities**
   current_config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Product = proteus.Model.get('product.product')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   purchase, = Purchase.find([('description', '=', uDescription),
   ('party.id', '=', supplier.id)])
   if not len(purchase.lines):
   PurchaseLine = proteus.Model.get('purchase.line')
   for row in context.table:
   uPDescription = row['description']
   quantity = float(row['quantity'])
   unit_price = Decimal(row['unit_price'])
   # allow 0 (<0.0001) quantity or price lines - just skip them
   if quantity < 0.0001 or unit_price == Decimal('0.00'): continue
   product = Product.find([('description', '=', uPDescription)])[0]
   purchase_line = PurchaseLine()
   purchase.lines.append(purchase_line)
   purchase_line.product = product
   purchase_line.quantity = quantity
   purchase_line.unit_price = unit_price
   purchase.save()
   # FixMe: eliminate duplication
   # 12 products, Supplier

**T/ASAS/SASAS Quote and Confirm and Process a P. O. with description "{uDescription}" from Supplier "{uSupplier}"**
   current_config = context.oProteusConfig
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   Purchase = proteus.Model.get('purchase.purchase')
   purchase, = Purchase.find([('description', '=', uDescription),
   ('party.id', '=', supplier.id)])
   if purchase.state == u'draft':
   purchase.click('quote')
   purchase.click('confirm')
   purchase.click('process')
   # These create the moves on the purchase order
   # 12 products, Supplier

**T/ASAS/SASAS Receive 9 products from the P. O. with description "{uDescription}" from Supplier "{uSupplier}" with quantities**
   current_config = context.oProteusConfig
   ShipmentIn = proteus.Model.get('stock.shipment.in')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   # FixMe: Hack alert - how do I find this Move again?
   if not ShipmentIn.find([('supplier.id', '=', supplier.id)]):
   shipment = ShipmentIn(supplier=supplier)
   Purchase = proteus.Model.get('purchase.purchase')
   purchase, = Purchase.find([('description', '=', uDescription),
   ('party.id', '=', supplier.id)])
   Move = proteus.Model.get('stock.move')
   Product = proteus.Model.get('product.product')
   # purchase.moves[0].product.description == u'product_fixed'
   # purchase.moves[1].product.description == u'product_average' 5.0
   for row in context.table:
   uDescription = row['description']
   fQuantity = float(row['quantity'])
   # allow 0 (<0.0001) quantity - just skip them
   if fQuantity < 0.0001: continue
   product = Product.find([('description', '=', uDescription)])[0]
   # FixMe: more detail on the find
   stock_move, = Move.find([('product.id', '=', product.id),
   ('supplier.id', '=', supplier.id)])
   move = Move(stock_move.id)
   shipment.incoming_moves.append(move)
   move.quantity = fQuantity
   shipment.save()
   ShipmentIn.receive([shipment.id], current_config.context)
   ShipmentIn.done([shipment.id], current_config.context)
   assert shipment.state == u'done'

**T/ASAS/SASAS After receiving 9 products assert the account credits and debits**
   NOT idempotent

**T/ASAS/SASAS Open a purchase invoice to pay for what we received from the P. O. with description "{uDescription}" to supplier "{uSupplier}" with prices**

**T/ASAS/SASAS After paying for what we received assert the account credits and debits**
   NOT idempotent

**T/ASAS/SASAS After shipping to customer assert the account credits and debits**
   current_config = context.oProteusConfig
   Account = proteus.Model.get('account.account')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   stock, = Account.find([
   ('kind', '=', 'stock'),
   ('company', '=', company.id),
   ('name', '=', sGetFeatureData(context, 'account.template,stock')),
   ])
   stock_customer, = Account.find([
   ('kind', '=', 'stock'),
   ('company', '=', company.id),
   ('name', '=', sGetFeatureData(context, 'account.template,stock_customer')),
   ])
   stock_customer.reload()
   assert (stock_customer.debit, stock_customer.credit) ==         (Decimal('28.00'), Decimal('0.00')),         "Expected 28.00,0.00 but got %.2f,%.2f" % (stock_customer.debit, stock_customer.credit,)
   stock.reload()
   assert (stock.debit, stock.credit) ==         (Decimal('50.00'), Decimal('28.00')),         "Expected 50.00,28.00 but got %.2f,%.2f" % (stock.debit, stock.credit,)

**T/ASAS/SASAS After posting the invoice to customer assert the account credits and debits**

**T/ASAS/SASAS Create an Invoice to supplier "{uSupplier}" with PaymentTerm "{uPaymentTerm}" by an accountant with quantities**
   current_config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   oCompanyParty, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', oCompanyParty.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   if not Purchase.find([('invoice_method', '=', 'order'),
   ('party.id', '=', supplier.id)]):
   PaymentTerm = proteus.Model.get('account.invoice.payment_term')
   payment_term, = PaymentTerm.find([('name', '=', uPaymentTerm)])
   purchase = Purchase()
   purchase.party = supplier
   purchase.payment_term = payment_term
   purchase.invoice_method = 'order'
   Product = proteus.Model.get('product.product')
   PurchaseLine = proteus.Model.get('purchase.line')
   for row in context.table:
   uDescription = row['description']
   fQuantity = float(row['quantity'])
   mUnitPrice = Decimal(row['unit_price'])
   # allow 0 (<0.0001) quantity - just skip them
   if fQuantity < 0.0001 or mUnitPrice <= Decimal(0.0): continue
   product = Product.find([('description', '=', uDescription)])[0]
   purchase_line = PurchaseLine()
   purchase.lines.append(purchase_line)
   purchase_line.product = product
   purchase_line.quantity = fQuantity
   purchase_line.unit_price = mUnitPrice
   purchase.save()
   Purchase.quote([purchase.id], current_config.context)
   Purchase.confirm([purchase.id], current_config.context)
   # Fixme: should be just == u'processing'
   assert purchase.state in [u'confirmed', u'processing']
   new_config = ProteusConfig.set_trytond(
   user=sGetFeatureData(context, 'user,accountant,login'),
   password=sGetFeatureData(context, 'user,accountant,password'),
   database_name=current_config.database_name)
   invoice_ids = [i.id for i in purchase.invoices]
   #? is this right? instead of the new_config?
   # current_config.user = accountant.id
   Invoice = proteus.Model.get('account.invoice')
   Invoice.write(invoice_ids, {
   'invoice_date': TODAY,
   }, current_config.context)
   #? is this needed:
   # Invoice.save(invoice_ids, new_config.context)
   Invoice.validate_invoice([i.id for i in purchase.invoices], new_config.context)
   # Supplier, Direct

**T/ASAS/SASAS Create an Invoice to supplier "{uSupplier}" with PaymentTerm "{uPaymentTerm}" by an accountant with negative quantities**
   Unfinished
   >>> invoice = Invoice()
   >>> invoice.party = customer
   >>> invoice.payment_term = payment_term
   >>> invoice_line = invoice.lines.new()
   >>> invoice_line.product = product
   >>> invoice_line.quantity = -1
   >>> invoice.save()
   >>> Invoice.post([invoice.id], config.context)
   >>> assert invoice.state == u'posted'
   >>> move = invoice.move
   >>> line_cogs, = (l for l in move.lines if l.account == cogs)
   >>> assert line_cogs.credit == Decimal('5.00')
   >>> line_stock, = (l for l in move.lines if l.account == stock_customer)
   >>> assert line_stock.debit == Decimal('5.00')
