# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/scenario_invoice_supplier.py


   =========================
   Invoice Supplier Scenario
   =========================
   This is a straight cut-and-paste from
   trytond_account_invoice-3.0.0/tests/scenario_invoice_supplier.rst
   It should be improved to be more like a Behave BDD.

**TS/AIS Post the invoice with description "{uDescription}" and assert the taxes named "{uTaxName}" are right**

**TS/AIS Create a credit note for the invoice with description "{uDescription}" and assert the amounts**
   current_config = context.oProteusConfig
   Invoice = proteus.Model.get('account.invoice')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   # company.id?
   invoice, = Invoice.find([('description', '=', uDescription),
   ('company', '=', company.id),])
   credit = proteus.Wizard('account.invoice.credit', [invoice])
   credit.form.with_refund = False
   credit.execute('credit')
   credit_note, = Invoice.find([('type', '=', 'in_credit_note')])
   assert credit_note.state == u'draft'
   assert credit_note.untaxed_amount == invoice.untaxed_amount
   assert credit_note.tax_amount == invoice.tax_amount
   assert credit_note.total_amount == invoice.total_amount
