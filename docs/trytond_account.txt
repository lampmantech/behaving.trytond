# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/trytond_account.py



**Create this fiscal year**

**Create this fiscal year without Invoicing**
   context.execute_steps(u'''
   Given Create the fiscal year "TODAY" without Invoicing
   ''')

**Create the fiscal year "{uYear}" without Invoicing**
   config = context.oProteusConfig
   Company = proteus.Model.get('company.company')
   FiscalYear = proteus.Model.get('account.fiscalyear')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   company, = Company.find([('party.id', '=', party.id)])
   if uYear.lower() == "now" or uYear.upper() == "TODAY":
   uYear=str(TODAY.year)
   if not FiscalYear.find([('name', '=', uYear),
   ('company', '=', company.id),]):
   oDate = datetime.date(int(uYear), 1, 1)
   fiscalyear = FiscalYear(name=uYear)
   fiscalyear.start_date = oDate + relativedelta(month=1, day=1)
   fiscalyear.end_date = oDate + relativedelta(month=12, day=31)
   fiscalyear.company = company
   Sequence = proteus.Model.get('ir.sequence')
   post_move_sequence = Sequence(name='post_move_seq %s' % (uYear,),
   code='account.move',
   company=company)
   post_move_sequence.save()
   fiscalyear.post_move_sequence = post_move_sequence
   fiscalyear.save()
   FiscalYear.create_period([fiscalyear.id], config.context)
   assert len(fiscalyear.periods) == 12
   assert FiscalYear.find([('name', '=', str(uYear))])

**Create this fiscal year with Invoicing**
   context.execute_steps(u'''
   Given Create the fiscal year "TODAY" with Invoicing
   ''')

**Create the fiscal year "{uYear}" with Invoicing**
   config = context.oProteusConfig
   if uYear == u'TODAY': uYear = str(TODAY.year)
   FiscalYear = proteus.Model.get('account.fiscalyear')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   if not FiscalYear.find([('name', '=', str(uYear)),
   ('company', '=', company.id),]):
   oDate = datetime.date(int(uYear), 1, 1)
   fiscalyear = FiscalYear(name='%s' % (uYear,))
   fiscalyear.start_date = oDate + relativedelta(month=1, day=1)
   fiscalyear.end_date = oDate + relativedelta(month=12, day=31)
   fiscalyear.company = company
   Sequence = proteus.Model.get('ir.sequence')
   post_move_sequence = Sequence(name='%s' % uYear,
   code='account.move',
   company=company)
   post_move_sequence.save()
   fiscalyear.post_move_sequence = post_move_sequence
   SequenceStrict = proteus.Model.get('ir.sequence.strict')
   invoice_sequence = SequenceStrict(name='%s' % uYear,
   code='account.invoice',
   company=company)
   invoice_sequence.save()
   fiscalyear.out_invoice_sequence = invoice_sequence
   fiscalyear.in_invoice_sequence = invoice_sequence
   fiscalyear.out_credit_note_sequence = invoice_sequence
   fiscalyear.in_credit_note_sequence = invoice_sequence
   fiscalyear.save()
   FiscalYear.create_period([fiscalyear.id], context.oProteusConfig.context)
   assert len(fiscalyear.periods) == 12
   assert FiscalYear.find([('name', '=', str(uYear))])

**Create this fiscal year with a non-strict post_move_seq**
   uYear=str(TODAY.year)
   context.execute_steps(u'''
   Given Create the fiscal year "%s" with a non-Strict post_move_seq
   '''  % (uYear,))
   # same as
   # @step('Create the fiscal year "{uYear}" without Invoicing')

**Create the fiscal year "{uYear}" with a non-Strict post_move_seq**
   current_config = context.oProteusConfig
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   FiscalYear = proteus.Model.get('account.fiscalyear')
   if uYear.lower() == "now" or uYear.upper() == "TODAY":
   uYear=str(TODAY.year)
   oDate=datetime.date(int(uYear), TODAY.month, TODAY.day)
   if not FiscalYear.find([('name', '=', uYear),
   ('company', '=', company.id),]):
   fiscalyear = FiscalYear(name=uYear)
   fiscalyear.start_date = oDate + relativedelta(month=1, day=1)
   fiscalyear.end_date = oDate + relativedelta(month=12, day=31)
   fiscalyear.company = company
   Sequence = proteus.Model.get('ir.sequence')
   post_move_seq = Sequence(name="post_move_seq %s" %(uYear,),
   code='account.move',
   company=company)
   post_move_seq.save()
   fiscalyear.post_move_sequence = post_move_seq
   fiscalyear.save()
   FiscalYear.create_period([fiscalyear.id], current_config.context)
   assert FiscalYear.find([('name', '=', uYear)])

**Create a default Minimal Account Chart**
   context.execute_steps(u'''
   Given Create a chart of accounts from template "%s" with root "%s"
   ''' % ( 'Minimal Account Chart', 'Minimal Account Chart'))
   # 'Minimal Account Chart', 'Minimal Account Chart'

**Create a chart of accounts from template "{uTem}" with root "{uRoot}"**
   Account = proteus.Model.get('account.account')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   Party = proteus.Model.get('party.party')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   # MINIMAL_ACCOUNT_ROOT
   if not Account.find([('name', '=', uRoot),
   ('company', '=', company.id),]):
   create_chart = proteus.Wizard('account.create_chart')
   create_chart.execute('account')
   AccountTemplate = proteus.Model.get('account.account.template')
   account_template, = AccountTemplate.find([('name', '=', uTem)])
   create_chart.form.account_template = account_template
   create_chart.form.company = company
   create_chart.execute('create_account')
   iLen = len( Account.find([
   ('company', '=', company.id),
   ]))
   assert iLen >= 6
   payable, receivable, = gGetFeaturesPayRec(context, company)
   create_chart.form.account_receivable = receivable
   create_chart.form.account_payable = payable
   create_chart.execute('create_properties')
   cash, = Account.find([
   ('kind', '=', 'other'),
   ('company', '=', company.id),
   ('name', '=', sGetFeatureData(context, 'account.template,main_cash')),
   ])
   # This is only used if the bank module is loaded
   #? check its an attribute first?
   cash.bank_reconcile = True
   cash.save()
   assert Account.find([('name', '=', uRoot)])

**Set the default credit and debit accounts on the cash Journal**

**Create a PaymentTerm named "{uTermName}" with "{uNum}" days remainder**
   PaymentTerm = proteus.Model.get('account.invoice.payment_term')
   iNum=int(uNum)
   assert iNum >= 0
   if not PaymentTerm.find([('name', '=', uTermName)]):
   PaymentTermLine = proteus.Model.get('account.invoice.payment_term.line')
   payment_term = PaymentTerm(name=uTermName)
   payment_term_line = PaymentTermLine(type='remainder', days=iNum)
   payment_term.lines.append(payment_term_line)
   payment_term.save()
   assert PaymentTerm.find([('name', '=', uTermName)])
   # 10% Sales Tax

**Create a tax named "{uTaxName}" with fields**
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   Account = proteus.Model.get('account.account')
   account_tax, = Account.find([
   ('kind', '=', 'other'),
   ('name', '=', sGetFeatureData(context, 'account.template,main_tax')),
   ('company', '=', company.id),
   ])
   Tax = proteus.Model.get('account.tax')
   if not Tax.find([('name', '=', uTaxName)]):
   TaxCode = proteus.Model.get('account.tax.code')
   tax = Tax()
   tax.name = uTaxName
   tax.invoice_account = account_tax
   tax.credit_note_account = account_tax
   for row in context.table:
   if row['name'] == 'invoice_base_code' or                    row['name'] == 'invoice_tax_code' or                    row['name'] == 'credit_note_base_code' or                    row['name'] == 'credit_note_tax_code':
   # create these if they dont exist
   l = TaxCode.find([('name', '=', row['value'])])
   if l:
   tax_code = l[0]
   else:
   tax_code = TaxCode(name=row['value'])
   tax_code.save()
   setattr(tax, row['name'], tax_code)
   else:
   setattr(tax, row['name'],
   string_to_python(row['name'], row['value'], Tax))
   tax.save()
