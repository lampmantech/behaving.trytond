# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/trytond_bank.py


   WIP - unfinished
   This would be a straight cut-and-paste from
   trytond_bank-3.2.0/tests/
   but trytond_bank doesn't have any meaningful tests.
   trytond_bank also doesn't have any documentation, meaningful or not.
   Which makes it pretty hard to figure out, especially as its classes
   have self-referential fields. Grr.

**Create a bank associated to a party "{uParty}" with optional |bic| field**
   Given     Create a named bank associated to a party, with optional BIC
   | bic    |
   | THEBIC |
   Create the party first, with things like addresses, and
   then use this to create the bank.
   The uBic field can be missing; if not it has 11 characters.

**Create a bank account with IBAN "{uIban}" at a bank associated to a party "{uParty}", with following optional number, owner or currency**
   Given     Create a bank account with IBAN "{uBank}" associated with a party "{uParty}"
   with a following table of | name | value |.
   Each name is one of: iban number owner or currency.
   Owner is a party name, and currency is a currency code.

**Create a bank account with number "{uNum}" at a bank associated to a party "{uParty}" with optional owner or currency following |name|value|**
   Create a bank account with number "{uNum}"     at a bank associated to a party "{uParty}"     with optional owner or currency following |name|value|
   Each name is one of: owner or currency.
   Owner is a party name, and currency is a currency code.

**Create a sequence on account.journal named "{uBankSequenceName}"**
   Given     Create a non-strict sequence on account.journal named "{uBankSequenceName}"
   Idempotent.

**Create a Bank Statement Journal named "{uName}" from the account.journal named "{uStatementAJName}" with currency "{uCur}"**
   Given     Create an account.bank.statement.journal named "{uName}"
   from the account.journal named "{uStatementAJName}"
   with currency "{uCur}"
   Idempotent.

**Create a cash account.journal named "{uName}" from the sequence named "{uBankSequenceName}" with following |name|value| credit_account, debit_account fields**
   Given     Create a cash account.journal named "{uName}"
   with the sequence named "{uBankSequenceName}"
   with a following |name|value| table
   with credit_account, debit_account fields, e.g.
   | name 	     	  | value	  |
   | credit_account  | Main Cash	  |
   | debit_account   | Main Cash	  |
   The accounts must be of domain: ('kind', '=', 'other')
   Idempotent.

**Create a financial account under "{uTemplate}" for the bank account with IBAN "{uIban}"**

**Create a financial account under "{uTemplate}" for the bank account with number "{uIban}"**
   Given     Create a new account into the chart of accounts for a bank account.
   It takes "{uTemplate}" as an argument which is the name an existing account
   in the chart where the new account will be created: if uTemplate is of
   kind view, the new chart will have it as its parent; if not,
   the new chart will be the next available sibling, with code += 1.
   The step assumes that the sTemplate account has an integer code, <= 9999;
   it just adds 1 until it finds the next available account, so you can
   have many calls to this step with different IBANS.
   The name of the new account is the IBAN.
   The account_bank_statement module has to be loaded
   before ANY accounts are created or this will error.
