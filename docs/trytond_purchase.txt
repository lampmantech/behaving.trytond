# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/trytond_purchase.py



**Create a Purchase Order with description "{uDescription}" from supplier "{uSupplier}" with fields**
   Create a Purchase Order from a supplier with a description.
   It expects a |name|value| table; the fields typically include:
   'payment_term', 'invoice_method', 'purchase_date', 'currency'
   | invoice_method    | shipment |
   | payment_term      | Direct 	 |
   | purchase_date     | TODAY	 |
   | currency          | EUR	 |
   Idempotent.

**Purchase on date "{uDate}" with description "{uDescription}" with their reference "{uRef}" as user named "{uUser}" in Currency coded "{uCur}" ProductTemplates from supplier "{uSupplier}" with PaymentTerm "{uTerm}" and InvoiceMethod "{uMethod}" with |name|quantity|description| fields**
   Purchase on date "TODAY" with description "Description"
   as user named "Purchase" in Currency coded "{uCur}"
   ProductTemplates from supplier "Supplier"
   with PaymentTerm "Direct" and InvoiceMethod "order"
   If the quantity is the word comment, the line type is set to comment.
   with |name|quantity|description| fields
   | name | quantity | line_description |
   | product | 2.0      |             |
   | product | comment  | Comment     |
   | product | 3.0      |             |

**Purchase "{uAct}" on date "{uDate}" the P. O. with description "{uDescription}" as user named "{uUser}" products from supplier "{uSupplier}"**
   Purchase "quote" on date "TODAY" the P. O. with description "P. O #1"
   as user named "Purchase" products from supplier "Supplier"

**Invoice "{uAct}" on date "{uDate}" the P. O. with description "{uDescription}" as user named "{uUser}" products from supplier "{uSupplier}"**
   Invoice "post" on date "TODAY" the P. O. with description "P. O #1"
   as user named "Account" products from supplier "Supplier"

**Validate shipments on "{uDate}" for P. O. with description "{uDescription}" as user named "{uUser}" for products from supplier "{uSupplier}"**
   config = context.oProteusConfig
   ShipmentIn = proteus.Model.get('stock.shipment.in')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   Purchase = proteus.Model.get('purchase.purchase')
   #FixMe: Use the dates in to identify the purchase
   purchase, = Purchase.find([('party.id',  '=', supplier.id),
   ('company.id',  '=', company.id),
   ('description', '=', uDescription)])
   User = proteus.Model.get('res.user')
   stock_user, = User.find([('name', '=', uUser)])
   proteus.config.user = stock_user.id
   Move = proteus.Model.get('stock.move')
   shipment = ShipmentIn()
   shipment.supplier = supplier
   if hasattr(shipment, 'warehouse'):
   shipment.warehouse = purchase.warehouse
   if uDate.lower() == 'today' or uDate.lower() == 'now':
   oDate = TODAY
   else:
   oDate = datetime.date(*map(int, uDate.split('-')))
   # if purchase.purchase_date: oDate = purchase.purchase_date
   shipment.effective_date = oDate
   #? and not shipment.planned_date
   shipment.planned_date = oDate
   for move in purchase.moves:
   incoming_move = Move(id=move.id)
   shipment.incoming_moves.append(incoming_move)
   shipment.save()
   assert shipment.origins == purchase.rec_name
   ShipmentIn.receive([shipment.id], config.context)
   ShipmentIn.done([shipment.id], config.context)
   purchase.reload()
   assert len(purchase.shipments) >= 1
   assert len(purchase.shipment_returns) == 0
