# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: ../features/steps/trytond_purchase.py



**Create a Purchase Order with description "{uDescription}" from supplier "{uSupplier}" with fields**
   current_config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier)])
   # comment currency warehouse
   if not Purchase.find([('description', '=', uDescription),
   ('company.id',  '=', company.id),
   ('party.id', '=', supplier.id)]):
   purchase = Purchase()
   purchase.party = supplier
   purchase.description = uDescription
   for row in context.table:
   if row['name'] == u'purchase_date':
   uDate = row['value']
   if uDate.lower() == 'today' or uDate.lower() == 'now':
   oDate = TODAY
   else:
   oDate = datetime.date(*map(int, uDate.split('-')))
   purchase.purchase_date = oDate
   continue
   setattr(purchase, row['name'],
   string_to_python(row['name'], row['value'], Purchase))
   purchase.save()
   purchase, = Purchase.find([('description', '=', uDescription),
   ('company.id',  '=', company.id),
   ('party.id', '=', supplier.id)])

**Purchase on date "{uDate}" with description "{uDescription}" with their reference "{uRef}" as user named "{uUser}" in Currency coded "{uCur}" ProductTemplates from supplier "{uSupplier}" with PaymentTerm "{uTerm}" and InvoiceMethod "{uMethod}" with |name|quantity|line_description| fields**
   # shouls we make quantity == 'comment'
   config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   Product = proteus.Model.get('product.product')
   supplier, = Party.find([('name', '=', uSupplier),])
   User = proteus.Model.get('res.user')
   purchase_user, = User.find([('name', '=', uUser)])
   proteus.config.user = purchase_user.id
   if not Purchase.find([('description', '=', uDescription),
   ('company.id',  '=', company.id),
   ('party.id', '=', supplier.id)]):
   purchase = Purchase()
   purchase.party = supplier
   PaymentTerm = proteus.Model.get('account.invoice.payment_term')
   payment_term, = PaymentTerm.find([('name', '=', uTerm)])
   purchase.payment_term = payment_term
   purchase.invoice_method = uMethod
   purchase.description = uDescription
   Currency = proteus.Model.get('currency.currency')
   oCurrency, = Currency.find([('code', '=', uCur)])
   purchase.currency = oCurrency
   purchase.supplier_reference = uRef
   if uDate.lower() == 'today' or uDate.lower() == 'now':
   oDate = TODAY
   else:
   oDate = datetime.date(*map(int, uDate.split('-')))
   purchase.purchase_date = oDate
   # purchases also have warehouse
   #? purchase.save()
   PurchaseLine = proteus.Model.get('purchase.line')
   for row in context.table:
   # BUG? Product.find([('name' should FAIL
   product, = Product.find([('name', '=', row['name'])])
   purchase_line = PurchaseLine()
   purchase.lines.append(purchase_line)
   purchase_line.product = product
   if row['quantity'] == 'comment':
   purchase_line.type = 'comment'
   else:
   # type == 'line' float?!
   purchase_line.quantity = Decimal(row['quantity'])
   if row['line_description']:
   purchase_line.description = row['line_description']
   #? purchase_line.save()
   purchase.save()
   user, = User.find([('login', '=', 'admin')])
   proteus.config.user = user.id
   purchase, = Purchase.find([('description', '=', uDescription),
   ('company.id',  '=', company.id),
   ('party.id', '=', supplier.id)])

**Purchase "{uAct}" on date "{uDate}" the P. O. with description "{uDescription}" as user named "{uUser}" products from supplier "{uSupplier}"**
   config = context.oProteusConfig
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   User = proteus.Model.get('res.user')
   supplier, = Party.find([('name', '=', uSupplier),])
   Purchase = proteus.Model.get('purchase.purchase')
   purchase, = Purchase.find([('party.id',  '=', supplier.id),
   ('company.id',  '=', company.id),
   ('description', '=', uDescription)])
   if uUser != u'Administrator':
   purchase_user, = User.find([('name', '=', uUser)])
   proteus.config.user = purchase_user.id
   if uAct == 'quote':
   Purchase.quote([purchase.id], config.context)
   # FixMe: 3.4ism
   assert purchase.state in [ u'quotation', u'processing', u'done']
   elif uAct == 'confirm':
   Purchase.confirm([purchase.id], config.context)
   assert purchase.state in [u'confirmed', u'processing', u'done']
   # this will help us find the invoice later
   if purchase.invoices:
   invoice, = purchase.invoices
   assert invoice.origins == purchase.rec_name
   if not invoice.description:
   invoice.description = purchase.description
   invoice.save()
   elif uAct == 'process':
   purchase.click(uAct)
   assert purchase.state in [u'processing', u'done']
   else:
   raise ValueError("uAct must be one of quote or confirm or process: " + uAct)
   purchase.reload()
   if uUser != u'Administrator':
   user, = User.find([('login', '=', 'admin')])
   proteus.config.user = user.id

**Invoice "{uAct}" on date "{uDate}" the P. O. with description "{uDescription}" as user named "{uUser}" products from supplier "{uSupplier}"**
   config = context.oProteusConfig
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   User = proteus.Model.get('res.user')
   supplier, = Party.find([('name', '=', uSupplier),])
   Purchase = proteus.Model.get('purchase.purchase')
   purchase, = Purchase.find([('party.id',  '=', supplier.id),
   ('company.id',  '=', company.id),
   ('description', '=', uDescription)])
   account_user, = User.find([('name', '=', uUser)])
   proteus.config.user = account_user.id
   Invoice = proteus.Model.get('account.invoice')
   lPurchaseInvoices = purchase.invoices
   assert lPurchaseInvoices
   invoice = Invoice(lPurchaseInvoices[0].id)
   oDate = oDateFromUDate(uDate)
   invoice.invoice_date = oDate
   invoice.accounting_date = oDate
   #? Surprised Tryton doesnt do this
   invoice.description = uDescription
   invoice.save()
   print('INFO: trytond_purchase,' +uDate +" "+ uDescription +" "+ invoice.type)
   if uAct == u'post':
   invoice.click('post')
   else:
   raise ValueError("uAct must be one of post: " + uAct)
   invoice.reload()
   user, = User.find([('login', '=', 'admin')])
   proteus.config.user = user.id

**Validate shipments on "{uDate}" for P. O. with description "{uDescription}" as user named "{uUser}" for products from supplier "{uSupplier}"**
   config = context.oProteusConfig
   ShipmentIn = proteus.Model.get('stock.shipment.in')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier),])
   Purchase = proteus.Model.get('purchase.purchase')
   #FixMe: Use the dates in to identify the purchase
   purchase, = Purchase.find([('party.id',  '=', supplier.id),
   ('company.id',  '=', company.id),
   ('description', '=', uDescription)])
   User = proteus.Model.get('res.user')
   stock_user, = User.find([('name', '=', uUser)])
   proteus.config.user = stock_user.id
   Move = proteus.Model.get('stock.move')
   shipment = ShipmentIn()
   shipment.supplier = supplier
   if hasattr(shipment, 'warehouse'):
   shipment.warehouse = purchase.warehouse
   oDate = oDateFromUDate(uDate)
   #? if purchase.purchase_date: oDate = purchase.purchase_date
   shipment.effective_date = oDate
   #? and not shipment.planned_date
   shipment.planned_date = oDate
   for move in purchase.moves:
   incoming_move = Move(id=move.id)
   incoming_move.supplier = supplier
   #? reference
   shipment.incoming_moves.append(incoming_move)
   shipment.save()
   assert shipment.origins == purchase.rec_name
   ShipmentIn.receive([shipment.id], config.context)
   ShipmentIn.done([shipment.id], config.context)
   purchase.reload()
   assert len(purchase.shipments) >= 1
   assert len(purchase.shipment_returns) == 0
   # split to be isomorphic with sale -
   # unfinished, untested

**Create a Purchase order with description "{uDescription}" in Currency coded "{uCur}" from supplier "{uSupplier}" on Date "{uDate}" with |name|value| fields**
   current_config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Party = proteus.Model.get('party.party')
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   supplier, = Party.find([('name', '=', uSupplier)])
   if not Purchase.find([('description', '=', uDescription),
   ('company', '=', company.id),
   ('party.id', '=', supplier.id)]):
   purchase = Purchase()
   purchase.party = supplier
   purchase.description = uDescription
   Currency = proteus.Model.get('currency.currency')
   oCurrency, = Currency.find([('code', '=', uCur)])
   purchase.currency = oCurrency
   if uDate.lower() == 'today' or uDate.lower() == 'now':
   oDate = TODAY
   else:
   oDate = datetime.date(*map(int, uDate.split('-')))
   purchase.purchase_date = oDate
   # 'payment_term', 'invoice_method'
   for row in context.table:
   setattr(purchase, row['name'],
   string_to_python(row['name'], row['value'], Purchase))
   purchase.save()
   oPurchase, = Purchase.find([('description', '=', uDescription),
   ('company', '=', company.id),
   ('party.id', '=', supplier.id)])
   # unfinished, untested

**Buy Products on the P. O. with description "{uDescription}" from supplier "{uSupplier}" with |description|quantity|unit_price| fields**
   current_config = context.oProteusConfig
   oPurchase = oBuyProductsPurchaseOrder(context, uDescription, uSupplier)
   sModel = 'purchase.purchase'
   Klass = proteus.Model.get(sModel)
   Klass.quote([oPurchase.id], current_config.context)
   Klass.confirm([oPurchase.id], current_config.context)
   Klass.process([oPurchase.id], current_config.context)
   assert oPurchase.state == u'processing'
   # unfinished, untested

**Buy Products on the P. O. with description "{uDescription}" from supplier "{uSupplier}" with |description|quantity| fields**
   current_config = context.oProteusConfig
   oPurchase = oBuyProductsPurchaseOrder(context, uDescription, uSupplier)
   sModel = 'purchase.purchase'
   Klass = proteus.Model.get(sModel)
   Klass.quote([oPurchase.id], current_config.context)
   Klass.confirm([oPurchase.id], current_config.context)
   Klass.process([oPurchase.id], current_config.context)
   assert oPurchase.state == u'processing'
   def oBuyProductsPurchaseOrder(context, uDescription, uSupplier):
   current_config = context.oProteusConfig
   Purchase = proteus.Model.get('purchase.purchase')
   Party = proteus.Model.get('party.party')
   supplier, = Party.find([('name', '=', uSupplier)])
   sCompanyName = sGetFeatureData(context, 'party,company_name')
   party, = Party.find([('name', '=', sCompanyName)])
   Company = proteus.Model.get('company.company')
   company, = Company.find([('party.id', '=', party.id)])
   purchase, = Purchase.find([('description', '=', uDescription),
   ('company', '=', company.id),
   ('party.id', '=', supplier.id)])
   if len(purchase.lines) <= 0:
   PurchaseLine = proteus.Model.get('purchase.line')
   Product = proteus.Model.get('product.product')
   for row in context.table:
   uDescription = row['description']
   # float ?!
   mKg = Decimal(row['quantity'])
   # allow 0 (<0.0001) quantity - just skip them
   if mKg < Decimal(0.0001): continue
   product = Product.find([('description', '=', uDescription)])[0]
   purchase_line = PurchaseLine()
   purchase.lines.append(purchase_line)
   purchase_line.product = product
   purchase_line.quantity = mKg
   purchase_line.description = uDescription
   if u'unit_price' in context.table.headings:
   purchase_line.unit_price = Decimal(row['unit_price'])
   purchase.save()
   return purchase
