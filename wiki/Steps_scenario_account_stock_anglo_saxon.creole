# -*- mode: text; fill-column: 75; coding: utf-8-unix; encoding: utf-8 -*-

From: [[features/steps/scenario_account_stock_anglo_saxon.py|features/steps/scenario_account_stock_anglo_saxon.py]]


   ==================================
   Account Stock Continental Scenario
   ==================================
   This is a straight cut-and-paste from
   trytond_account-2.8.1/tests/scenario_account_reconciliation.rst
   Unfinished.

**T/ASAS/SASAS Create products of type "{uType}" from the ProductTemplate named "{uName}" with fields**
   Given     Create products of type "{uType}" from the ProductTemplate named     "{uName}" with fields
   | name                | cost_price_method | description         |
   | product_fixed	| fixed   	    | Product Fixed       |
   | product_average	| average	    | Product Average     |
   Idempotent.

**T/ASAS/SASAS Purchase products on the P. O. with description "{uDescription}" from supplier "{uSupplier}" with quantities**
   Given     Purchase products on the P. O. with description "{uDescription}"     from supplier "{uSupplier}" with quantities
   | description  	| quantity | unit_price |
   | product_fixed	| 5.0	   | 4		|
   | product_average	| 7.0	   | 6		|
   Idempotent.

**T/ASAS/SASAS Quote and Confirm and Process a P. O. with description "{uDescription}" from Supplier "{uSupplier}"**
   Given     T/ASAS/SASAS Quote and Confirm and Process a P. O.     with description "{uDescription}" from Supplier "{uSupplier}"
   Idempotent.

**T/ASAS/SASAS Receive 9 products from the P. O. with description "{uDescription}" from Supplier "{uSupplier}" with quantities**
   Given     T/ASAS/SASAS Receive 9 products from the P. O. with description "{uDescription}"     from Supplier "{uSupplier}" with quantities
   Idempotent.

**T/ASAS/SASAS After receiving 9 products assert the account credits and debits**
   NOT idempotent

**T/ASAS/SASAS Open a purchase invoice to pay for what we received from the P. O. with description "{uDescription}" to supplier "{uSupplier}" with prices**

**T/ASAS/SASAS After paying for what we received assert the account credits and debits**
   NOT idempotent

**T/ASAS/SASAS After shipping to customer assert the account credits and debits**
   Given     T/ASAS/SASAS After shipping to customer assert the account credits and debits
   NOT idempotent.

**T/ASAS/SASAS After posting the invoice to customer assert the account credits and debits**

**T/ASAS/SASAS Create an Invoice to supplier "{uSupplier}" with PaymentTerm "{uPaymentTerm}" by an accountant with quantities**
   Given     Create an Invoice to supplier "uSupplier" with PaymentTerm "uPaymentTerm"     by an accountant with quantities
   | description     | quantity	| unit_price |
   | product_fixed   | 5.0      	| 4.00	     |
   Idempotent.

**T/ASAS/SASAS Create an Invoice to supplier "{uSupplier}" with PaymentTerm "{uPaymentTerm}" by an accountant with negative quantities**
   Unfinished
   >>> invoice = Invoice()
   >>> invoice.party = customer
   >>> invoice.payment_term = payment_term
   >>> invoice_line = invoice.lines.new()
   >>> invoice_line.product = product
   >>> invoice_line.quantity = -1
   >>> invoice.save()
   >>> Invoice.post([invoice.id], config.context)
   >>> assert invoice.state == u'posted'
   >>> move = invoice.move
   >>> line_cogs, = (l for l in move.lines if l.account == cogs)
   >>> assert line_cogs.credit == Decimal('5.00')
   >>> line_stock, = (l for l in move.lines if l.account == stock_customer)
   >>> assert line_stock.debit == Decimal('5.00')
----
This file is automatically generated from the source code: do not edit.
