
== trytond_account.py ==

FixMe?: migrate this to use:
from trytond.modules.company.tests.tools import create_company, \
get_company
from trytond.modules.account.tests.tools import create_fiscalyear, \
create_chart, get_accounts
from.trytond.modules.account_invoice.tests.tools import \
set_fiscalyear_invoice_sequences, create_payment_term

**STEP: Create this fiscal year**


**STEP: Create this fiscal year without Invoicing**

Given \
Create the fiscal year "TODAY" without Invoicing

**STEP: Create the fiscal year "{uYear}" without Invoicing**

Given \
Creates a fiscal year 'uYear' with a non-Strict post_move_seq.
Create the company first before creating fiscal years.

**STEP: Create this fiscal year with Invoicing**

Given \
Create the fiscal year "TODAY" with Invoicing

**STEP: Create the fiscal year "{uYear}" with Invoicing**

Given \
Creates a fiscal year 'uYear' with a non-Strict move_sequence
and a Strict invoice_sequence for account.invoice.
Create the company first.

**STEP: Create this fiscal year with a non-strict post_move_seq**

Given \
Create the fiscal year "TODAY.year" with a non-Strict post_move_seq

**STEP: Create the fiscal year "{uYear}" with a non-Strict post_move_seq**

Given \
Creates a fiscal year 'uYear' with a non-Strict post_move_seq.
Create the company first.

**STEP: Create a default Minimal Account Chart**

Given \
Create a default chart of accounts from template
"Minimal Account Chart" with root "Minimal Account Chart"

**STEP: Create a chart of accounts from template "{uTem}" with root "{uRoot}"**

Given \
Create a chart of accounts from template "{uTem}"
with root account "{uRoot}".
Before you do this, with the step 'Set the feature data with values:'
set the feature data as a |name|value| table for:
* party,company_name
* account.template,main_receivable
* account.template,main_payable
* account.template,main_revenue
* account.template,main_expense
* account.template,main_cash

**STEP: Set the default credit and debit accounts on the cash Journal**


**STEP: Create a PaymentTerm named "{uTermName}" with "{uNum}" days remainder**

Given \
Create a account.invoice.payment_term with name 'uTermName'
with a account.invoice.payment_term.line of type 'remainder',
and days=uNum.
Idempotent.

**STEP: Create a tax named "{uTaxName}" with fields**

Given \
Create a tax named "10% Sales Tax" with fields
| name                  | value            |
| description           | 10% Sales Tax    |
| type 	                | percentage       |
| rate 	                | .10	           |
| invoice_base_code     | invoice base     |
| invoice_tax_code      | invoice tax      |
| credit_note_base_code | credit note base |
| credit_note_tax_code  | credit note tax  |

This file is automatically generated from the source code: do not edit.
